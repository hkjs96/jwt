
=== ./build/resources/main/application.yml ===

spring:
  application:
    name: jwt
  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    driver-class-name: org.h2.Driver
    username: sa
    password:
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
  redis:
    host: localhost
    port: 6379
  h2:
    console:
      enabled: true
      path: /h2-console

jwt:
  secret: "PEJhc2U2NC1lbmNvZGVkLXNlY3JldD4="
  expiration: 60 # Access Token ??(?)

logging:
  level:
    org.springframework: INFO

# H2 Console ???
management:
  endpoints:
    web:
      exposure:
        include: h2-console
  endpoint:
    h2-console:
      enabled: true


=== ./src/main/java/com/example/jwt/common/ApiResponse.java ===

package com.example.jwt.common;

import io.swagger.v3.oas.annotations.media.Schema;
import lombok.Getter;

@Getter
public class ApiResponse<T> {
    @Schema(description = "응답 코드 (" +
            "SUCCESS: 성공, ERROR: 실패")
    private final String code;
    @Schema(description = "응답 메시지")
    private final String message;
    @Schema(description = "응답 데이터")
    private final T data;

    private ApiResponse(String code, String message, T data) {
        this.code = code;
        this.message = message;
        this.data = data;
    }

    public static <T> ApiResponse<T> success(T data) {
        return new ApiResponse<>("SUCCESS", "OK", data);
    }

    public static ApiResponse<Void> success() {
        return new ApiResponse<>("SUCCESS", "OK", null);
    }

    public static ApiResponse<Void> error(String code, String msg) {
        return new ApiResponse<>(code, msg, null);
    }
}
=== ./src/main/java/com/example/jwt/common/exception/EmailDupException.java ===

package com.example.jwt.common.exception;

public class EmailDupException extends RuntimeException {
    public EmailDupException(String message) {
        super(message);
    }
}
=== ./src/main/java/com/example/jwt/common/exception/GlobalExceptionHandler.java ===

package com.example.jwt.common.exception;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import com.example.jwt.common.ApiResponse;

@RestControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(EmailDupException.class)
    public ResponseEntity<ApiResponse<Void>> handleEmailDup(EmailDupException ex) {
        return ResponseEntity
                .status(409)
                .body(ApiResponse.error("DUPLICATE_EMAIL", ex.getMessage()));
    }

    @ExceptionHandler(Exception.class)
    public ResponseEntity<ApiResponse<Void>> handleAll(Exception ex) {
        return ResponseEntity
                .status(500)
                .body(ApiResponse.error("INTERNAL_ERROR", ex.getMessage()));
    }
}
=== ./src/main/java/com/example/jwt/config/auth/JwtTokenProvider.java ===

package com.example.jwt.config.auth;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.JwtException;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;
import jakarta.annotation.PostConstruct;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import javax.crypto.SecretKey;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

@Component
public class JwtTokenProvider {

    private static final Logger log = LoggerFactory.getLogger(JwtTokenProvider.class);
    private static final String ROLE_CLAIM = "role";
    private static final String REFRESH_ROLE = "REFRESH";
    public static final long REFRESH_TOKEN_EXPIRATION_MS = 1000L * 60 * 60 * 24 * 7;

    @Value("${jwt.secret}")
    private String secretKeyEncoded;
    @Value("${jwt.expiration}")
    private long expirationMinutes;

    private SecretKey secretKey;

    @PostConstruct
    public void init() {
        log.info("JWT Provider initialized with expiration time: {} minutes", expirationMinutes);
    }

    private SecretKey getSecretKey() {
        if (secretKey == null) {
            secretKey = Keys.hmacShaKeyFor(Decoders.BASE64.decode(secretKeyEncoded));
        }
        return secretKey;
    }

    public String createAccessToken(String email, String role) {
        long expirationMs = expirationMinutes * 60 * 1000;
        String token = createToken(email, role, expirationMs);

        Date expirationDate = new Date(System.currentTimeMillis() + expirationMs);
        LocalDateTime expirationDateTime = LocalDateTime.ofInstant(
                expirationDate.toInstant(), ZoneId.systemDefault());

        log.info("Access token created for user: {}, role: {}, expires at: {}",
                email, role, expirationDateTime);
        log.info("Created access token: {}", token);

        return token;
    }

    public String createRefreshToken(String email) {
        String token = createToken(email, REFRESH_ROLE, REFRESH_TOKEN_EXPIRATION_MS);

        Date expirationDate = new Date(System.currentTimeMillis() + REFRESH_TOKEN_EXPIRATION_MS);
        LocalDateTime expirationDateTime = LocalDateTime.ofInstant(
                expirationDate.toInstant(), ZoneId.systemDefault());

        log.info("Refresh token created for user: {}, expires at: {}",
                email, expirationDateTime);
        log.info("Created refresh token: {}", token);

        return token;
    }

    private String createToken(String email, String role, long expiry) {
        Map<String, Object> claims = new HashMap<>();
        claims.put(ROLE_CLAIM, role);

        Date now = new Date();
        Date expirationDate = new Date(now.getTime() + expiry);

        return Jwts.builder()
                .subject(email)
                .claims(claims)
                .issuedAt(now)
                .expiration(expirationDate)
                .signWith(getSecretKey())
                .compact();
    }

    public boolean validateToken(String token) {
        try {
            Jwts.parser()
                    .decryptWith((getSecretKey()))
                    .build()
                    .parseSignedClaims(token);
            return true;
        } catch (ExpiredJwtException e) {
            log.warn("❌ JWT token expired: {}", e.getMessage());
            return false;
        } catch (JwtException | IllegalArgumentException e) {
            log.warn("❌ Invalid JWT: {}", e.getMessage());
            return false;
        }
    }

    public String getSubject(String token) {
        return getClaims(token).getSubject();
    }

    public String getRole(String token) {
        return getClaims(token).get(ROLE_CLAIM, String.class);
    }

    public boolean isRefreshToken(String token) {
        return REFRESH_ROLE.equals(getRole(token));
    }

    public Date getExpirationDate(String token) {
        return getClaims(token).getExpiration();
    }

    private Claims getClaims(String token) {
        return Jwts.parser()
                .decryptWith(getSecretKey())
                .build()
                .parseSignedClaims(token)
                .getPayload();
    }
}
=== ./src/main/java/com/example/jwt/config/CustomUserDetails.java ===

package com.example.jwt.config;

import com.example.jwt.domain.user.entity.User;
import lombok.Getter;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.GrantedAuthority;

import java.util.Collection;
import java.util.stream.Collectors;

@Getter
public class CustomUserDetails implements UserDetails {

    private final User user;

    public CustomUserDetails(User user) {
        this.user = user;
    }

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return user.getRoles().stream()
                .map(role -> (GrantedAuthority) () -> role)
                .collect(Collectors.toSet());
    }

    @Override public String getPassword() { return user.getPassword(); }
    @Override public String getUsername() { return user.getEmail(); }

    @Override public boolean isAccountNonExpired()     { return true; }
    @Override public boolean isAccountNonLocked()      { return true; }
    @Override public boolean isCredentialsNonExpired() { return true; }
    @Override public boolean isEnabled()               { return true; }
}

=== ./src/main/java/com/example/jwt/config/CustomUserDetailsService.java ===

package com.example.jwt.config;

import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import lombok.RequiredArgsConstructor;

import com.example.jwt.domain.user.repository.UserRepository;
import com.example.jwt.domain.user.entity.User;


@Service
@RequiredArgsConstructor
public class CustomUserDetailsService implements UserDetailsService {

    private final UserRepository userRepository;

    @Override
    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> new UsernameNotFoundException("User not found: " + email));

        return new CustomUserDetails(user);
    }
}
=== ./src/main/java/com/example/jwt/config/JwtAuthenticationFilter.java ===

package com.example.jwt.config;

import lombok.RequiredArgsConstructor;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;
import com.example.jwt.config.auth.JwtTokenProvider;

@Component
@RequiredArgsConstructor
public class JwtAuthenticationFilter extends OncePerRequestFilter {
    private final JwtTokenProvider jwtProvider;

    @Override
    protected void doFilterInternal(HttpServletRequest request,
                                    HttpServletResponse response,
                                    FilterChain filterChain)
            throws ServletException, IOException {
        String header = request.getHeader("Authorization");
        if (header != null && header.startsWith("Bearer ")) {
            String token = header.substring(7);
            if (jwtProvider.validateToken(token)) {
                String email = jwtProvider.getSubject(token);
                String role = jwtProvider.getRole(token);
                var auth = new UsernamePasswordAuthenticationToken(
                        email,
                        null,
                        List.of(new SimpleGrantedAuthority(role))
                );
                SecurityContextHolder.getContext().setAuthentication(auth);
            }
        }
        filterChain.doFilter(request, response);
    }
}
=== ./src/main/java/com/example/jwt/config/RedisConfig.java ===

package com.example.jwt.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;

@Configuration
public class RedisConfig {
    @Bean
    public RedisConnectionFactory redisConnectionFactory() {
        return new LettuceConnectionFactory();
    }

    @Bean
    public RedisTemplate<String, String> redisTemplate(
            RedisConnectionFactory connectionFactory) {
        RedisTemplate<String, String> template = new RedisTemplate<>();
        template.setConnectionFactory(connectionFactory);
        return template;
    }
}
=== ./src/main/java/com/example/jwt/config/SecurityConfig.java ===

package com.example.jwt.config;

import com.example.jwt.domain.user.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.annotation.web.configurers.HeadersConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.factory.PasswordEncoderFactories;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Configuration
@RequiredArgsConstructor
public class SecurityConfig {
    private final JwtAuthenticationFilter jwtFilter;
    private final UserRepository userRepository;

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            .csrf(AbstractHttpConfigurer::disable)
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/api/auth/**", "/v3/api-docs/**", "/swagger-ui/**").permitAll()
                .anyRequest().authenticated()
            )
            .sessionManagement(session ->
                session.sessionCreationPolicy(SessionCreationPolicy.STATELESS)
            )
            .addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class)
            .headers(headers ->
                headers.frameOptions(HeadersConfigurer.FrameOptionsConfig::disable)
            );

        return http.build();
    }

    @Bean
    public AuthenticationManager authenticationManager(
            AuthenticationConfiguration ac) throws Exception {
        return ac.getAuthenticationManager();
    }

    @Bean
    public DaoAuthenticationProvider authenticationProvider(PasswordEncoder pwEnc, CustomUserDetailsService uds) {
        DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
        provider.setPasswordEncoder(pwEnc);
        provider.setUserDetailsService(uds);
        return provider;
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return PasswordEncoderFactories.createDelegatingPasswordEncoder();
    }

}
=== ./src/main/java/com/example/jwt/controller/AuthController.java ===

package com.example.jwt.controller;

import com.example.jwt.domain.user.entity.User;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import jakarta.validation.Valid;
import com.example.jwt.common.ApiResponse;
import com.example.jwt.domain.auth.dto.*;
import com.example.jwt.domain.auth.service.AuthService;

@RestController
@RequestMapping("/api/auth")
@RequiredArgsConstructor
public class AuthController {
    private final AuthService authService;

    @PostMapping("/signup")
    public ResponseEntity<ApiResponse<Void>> signup(@Valid @RequestBody SignupRequest req) {
        authService.signup(req);
        return ResponseEntity.ok(ApiResponse.success());
    }

    @PostMapping("/login")
    public ResponseEntity<ApiResponse<TokenResponse>> login(@Valid @RequestBody LoginRequest req) {
        return ResponseEntity.ok(ApiResponse.success(authService.login(req)));
    }

    @PostMapping("/refresh")
    public ResponseEntity<ApiResponse<TokenResponse>> refresh(@Valid @RequestBody RefreshRequest req) {
        return ResponseEntity.ok(ApiResponse.success(authService.refresh(req)));
    }

    @PostMapping("/logout")
    public ResponseEntity<ApiResponse<Void>> logout(@RequestParam String email) {
        authService.logout(email);
        return ResponseEntity.ok(ApiResponse.success());
    }

}
=== ./src/main/java/com/example/jwt/domain/auth/dto/LoginRequest.java ===

package com.example.jwt.domain.auth.dto;

import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.*;

@Schema(description = "로그인 요청")
public record LoginRequest(
        @Schema(example = "user@example.com") @Email @NotBlank String email,
        @Schema(example = "P@ssw0rd!") @NotBlank String password
) {}
=== ./src/main/java/com/example/jwt/domain/auth/dto/RefreshRequest.java ===

package com.example.jwt.domain.auth.dto;

import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotBlank;

@Schema(description = "토큰 재발급 요청")
public record RefreshRequest(
        @Schema(example = "eyJhbGciOiJI...") @NotBlank String refreshToken
) {}
=== ./src/main/java/com/example/jwt/domain/auth/dto/SignupRequest.java ===

package com.example.jwt.domain.auth.dto;

import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.*;

@Schema(description = "회원가입 요청")
public record SignupRequest(
        @Schema(example = "user@example.com") @Email @NotBlank String email,
        @Schema(example = "P@ssw0rd!") @NotBlank @Size(min = 8, max = 20) String password
) {}
=== ./src/main/java/com/example/jwt/domain/auth/dto/TokenResponse.java ===

package com.example.jwt.domain.auth.dto;

import io.swagger.v3.oas.annotations.media.Schema;

@Schema(description = "토큰 응답")
public record TokenResponse(
        @Schema(example = "eyJhbGci...") String accessToken,
        @Schema(example = "eyJhbGci...") String refreshToken,
        @Schema(description = "Access Token 만료 시간(초)", example = "3600") long expiresIn
) {}
=== ./src/main/java/com/example/jwt/domain/auth/service/AuthService.java ===

package com.example.jwt.domain.auth.service;

import com.example.jwt.common.exception.EmailDupException;
import com.example.jwt.config.CustomUserDetails;
import com.example.jwt.config.auth.JwtTokenProvider;
import com.example.jwt.domain.auth.dto.LoginRequest;
import com.example.jwt.domain.auth.dto.RefreshRequest;
import com.example.jwt.domain.auth.dto.SignupRequest;
import com.example.jwt.domain.auth.dto.TokenResponse;
import com.example.jwt.domain.user.entity.User;
import com.example.jwt.domain.user.repository.UserRepository;
import io.jsonwebtoken.JwtException;
import lombok.RequiredArgsConstructor;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Set;
import java.util.concurrent.TimeUnit;

@Service
@RequiredArgsConstructor
public class AuthService {
    private final UserRepository userRepository;
    private final AuthenticationManager authenticationManager;
    private final JwtTokenProvider jwtProvider;
    private final RedisTemplate<String, String> redisTemplate;

    @Transactional
    public void signup(SignupRequest req) {
        if (userRepository.existsByEmail(req.email()))
            throw new EmailDupException("이미 사용 중인 이메일입니다.");
        User user = User.builder()
                .email(req.email())
                .password(req.password()) // TODO: PasswordEncoder 적용 필요
                .roles(Set.of("ROLE_USER"))
                .build();
        userRepository.save(user);
    }

    @Transactional
    public TokenResponse login(LoginRequest req) {
        Authentication auth = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(req.email(), req.password())
        );
        CustomUserDetails customUser = (CustomUserDetails) auth.getPrincipal();
        User user = customUser.getUser(); // 👍 안전하게 접근

        String at = jwtProvider.createAccessToken(user.getEmail(), user.getRoles().iterator().next());
        String rt = jwtProvider.createRefreshToken(user.getEmail());
        redisTemplate.opsForValue()
                .set("refresh:" + user.getEmail(), rt,
                        JwtTokenProvider.REFRESH_TOKEN_EXPIRATION_MS, TimeUnit.MILLISECONDS);
        long expiresIn = jwtProvider.getExpirationDate(at).getTime() - System.currentTimeMillis();
        return new TokenResponse(at, rt, expiresIn / 1000);
    }

    @Transactional(readOnly = true)
    public TokenResponse refresh(RefreshRequest req) {
        String refresh = req.refreshToken();
        if (!jwtProvider.validateToken(refresh) || !jwtProvider.isRefreshToken(refresh))
            throw new JwtException("Invalid Refresh Token");
        String email = jwtProvider.getSubject(refresh);
        String stored = redisTemplate.opsForValue().get("refresh:" + email);
        if (!refresh.equals(stored))
            throw new JwtException("Refresh Token Mismatch");
        String at = jwtProvider.createAccessToken(email, jwtProvider.getRole(refresh));
        String rt = jwtProvider.createRefreshToken(email);
        redisTemplate.opsForValue()
                .set("refresh:" + email, rt,
                        JwtTokenProvider.REFRESH_TOKEN_EXPIRATION_MS, TimeUnit.MILLISECONDS);
        long expiresIn = jwtProvider.getExpirationDate(at).getTime() - System.currentTimeMillis();
        return new TokenResponse(at, rt, expiresIn / 1000);
    }

    public void logout(String email) {
        redisTemplate.delete("refresh:" + email);
    }
}
=== ./src/main/java/com/example/jwt/domain/user/entity/User.java ===

package com.example.jwt.domain.user.entity;

import jakarta.persistence.*;
import lombok.*;
import java.util.Set;

@Entity
@Table(name = "users", uniqueConstraints = @UniqueConstraint(columnNames = "email"))
@Getter
@Builder
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@AllArgsConstructor
public class User {
    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false, unique = true)
    private String email;

    @Column(nullable = false)
    private String password;

    @ElementCollection(fetch = FetchType.EAGER)
    @CollectionTable(name = "user_roles", joinColumns = @JoinColumn(name = "user_id"))
    @Column(name = "role")
    private Set<String> roles;
}
=== ./src/main/java/com/example/jwt/domain/user/repository/UserRepository.java ===

package com.example.jwt.domain.user.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import com.example.jwt.domain.user.entity.User;
import java.util.Optional;

public interface UserRepository extends JpaRepository<User, Long> {
    boolean existsByEmail(String email);
    Optional<User> findByEmail(String email);
}
=== ./src/main/java/com/example/jwt/JwtApplication.java ===

package com.example.jwt;

import io.swagger.v3.oas.annotations.OpenAPIDefinition;
import io.swagger.v3.oas.annotations.info.Info;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@OpenAPIDefinition(
		info = @Info(title = "JWT 인증 API", version = "v1", description = "JWT+Redis 인증 샘플 프로젝트")
)
@SpringBootApplication
public class JwtApplication {

	public static void main(String[] args) {
		SpringApplication.run(JwtApplication.class, args);
	}

}

=== ./src/main/java/com/example/jwt/util/DateTimeProvider.java ===

package com.example.jwt.util;

public class DateTimeProvider {
}

=== ./src/main/resources/application.yml ===

spring:
  application:
    name: jwt
  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    driver-class-name: org.h2.Driver
    username: sa
    password:
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
  redis:
    host: localhost
    port: 6379
  h2:
    console:
      enabled: true
      path: /h2-console

jwt:
  secret: "PEJhc2U2NC1lbmNvZGVkLXNlY3JldD4="
  expiration: 60 # Access Token ??(?)

logging:
  level:
    org.springframework: INFO

# H2 Console ???
management:
  endpoints:
    web:
      exposure:
        include: h2-console
  endpoint:
    h2-console:
      enabled: true


=== ./src/test/java/com/example/jwt/controller/AuthControllerTest.java ===

package com.example.jwt.controller;

import com.example.jwt.domain.user.entity.User;
import com.example.jwt.domain.user.repository.UserRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.test.web.servlet.MockMvc;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest
@AutoConfigureMockMvc
class AuthControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @BeforeEach
    void setup() {
        userRepository.deleteAll();

        User user = User.builder()
                .email("test@example.com")
                .password(passwordEncoder.encode("plainPassword"))
                .build();
        userRepository.save(user);
    }

    @Test
    void loginTest() throws Exception {
        mockMvc.perform(post("/api/auth/login")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content("""
                    {
                        "email": "test@example.com",
                        "password": "plainPassword"
                    }
                """))
                .andExpect(status().isOk())
                .andDo(print());
    }
}

=== ./src/test/java/com/example/jwt/JwtApplicationTests.java ===

package com.example.jwt;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class JwtApplicationTests {

	@Test
	void contextLoads() {
	}

}
